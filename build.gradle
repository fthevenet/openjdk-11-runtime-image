/*
 *    Copyright 2017-2018 Frederic Thevenet
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

plugins {
    id "de.undercouch.download" version "3.4.3"
}

ext.IS_TAG = System.getenv('IS_TAG') != null ? System.getenv('IS_TAG') == "true" : false
ext.BUILD_VERSION = IS_TAG ? System.getenv('REPO_TAG_NAME') : "SNAPSHOT"

ext.LICENSE_NAME = 'Apache License, Version 2.0'
ext.LICENSE_URL = 'http ://www.apache.org/licenses/LICENSE-2.0.txt'
ext.LICENSE_DISTRIBUTION = 'repo'
ext.OS_NAME = System.getProperty("os.name").toLowerCase()
ext.OS_ARCH = System.getProperty("os.arch")
ext.IS_64 = OS_ARCH.toLowerCase().contains("64")
ext.IS_MAC = OS_NAME.contains("mac") || OS_NAME.contains("darwin")
ext.IS_WINDOWS = OS_NAME.contains("windows")
ext.IS_LINUX = OS_NAME.contains("linux")
ext.OS_FAMILY = IS_MAC ? 'mac' : IS_WINDOWS ? 'windows' : IS_LINUX ? 'linux' : 'unsupported'
ext.JDK_HOME = System.getProperty("java.home")
ext.OPENJFX_VERSION = "11.0.1"
ext.OPENJFX_PLATEFORM_CLASSIFIER = IS_MAC ? 'mac' : IS_WINDOWS ? 'win' : IS_LINUX ? 'linux' : 'unsupported'
ext.OPENJFX_JMODS_DOWNLOAD_URL = "https://gluonhq.com/download/javafx-${OPENJFX_VERSION.replace(".", "-")}-jmods-${OS_FAMILY}"
ext.JLINK_ADD_MODULES = "javafx.controls,javafx.fxml,javafx.swing,javafx.base,javafx.graphics,javafx.media,javafx.web,"+
                        "java.base,java.compiler,java.datatransfer,java.desktop,java.instrument,java.logging,java.management,java.management.rmi,java.naming,java.net.http,java.prefs," +
                        "java.rmi,java.scripting,java.se,java.security.jgss,java.security.sasl,java.smartcardio,java.sql,java.sql.rowset,java.transaction.xa,java.xml,java.xml.crypto," +
                        "jdk.accessibility,jdk.aot,jdk.attach,jdk.charsets,jdk.compiler,jdk.crypto.cryptoki,jdk.crypto.ec,jdk.dynalink,jdk.editpad,jdk.hotspot.agent," +
                        "jdk.httpserver,jdk.internal.ed,jdk.internal.jvmstat,jdk.internal.le,jdk.internal.opt,jdk.internal.vm.ci,jdk.internal.vm.compiler,"+
                        "jdk.internal.vm.compiler.management,jdk.jartool,jdk.javadoc,jdk.jcmd,jdk.jconsole,jdk.jdeps,jdk.jdi,jdk.jdwp.agent,jdk.jfr,jdk.jlink,jdk.jshell,jdk.jsobject," +
                        "jdk.jstatd,jdk.localedata,jdk.management,jdk.management.agent,jdk.management.jfr,jdk.naming.dns,jdk.naming.rmi,jdk.net,jdk.pack,jdk.rmic,"+
                        "jdk.scripting.nashorn,jdk.scripting.nashorn.shell,jdk.sctp,jdk.security.auth,jdk.security.jgss,jdk.unsupported,jdk.unsupported.desktop,jdk.xml.dom,jdk.zipfs" +
                        (IS_WINDOWS ? "jdk.crypto.mscapi" :"")
ext.DISTRIBUTION_NAME = "${project.name}-${BUILD_VERSION}_${OS_FAMILY}-${OS_ARCH}"
ext.DISTRIBUTION_PATH = "${buildDir}/distributions/${DISTRIBUTION_NAME}"
ext.ARCHIVE_PATH = ""

System.out.println("Building version: ${BUILD_VERSION}")
System.out.println(System.getProperty("os.name").toLowerCase())

task clean(type: Delete) {
    delete buildDir
}


task downloadopenJfxJmods(type: Download) {
    src OPENJFX_JMODS_DOWNLOAD_URL
    dest new File("${buildDir}/tmp", 'openjfx-jmods.zip')
}

task downloadAndUnzipFile(dependsOn: downloadopenJfxJmods, type: Copy) {
    from zipTree(downloadopenJfxJmods.dest)
    into buildDir
}

task createRuntimeImage(type: Exec, dependsOn: [downloadAndUnzipFile]) {
    workingDir project.projectDir
    commandLine = [
            'jlink',
            '-p', "${JDK_HOME}/jmods${File.pathSeparator}${buildDir}/javafx-jmods-${OPENJFX_VERSION}",
            '--add-modules', JLINK_ADD_MODULES,
            '--strip-debug',
            '--no-header-files',
            '--no-man-pages',
            "--vm=server",
            "--compress=2",
            '--output', "${DISTRIBUTION_PATH}/runtime"
    ]
    doLast {
        System.out.println("Application '${project.name}' packaged.")
        System.out.println(" -> location: ${DISTRIBUTION_PATH}/")
    }
}

task packageDistributionZip(type: Zip) {
    from DISTRIBUTION_PATH
    destinationDir buildDir
    archiveName "${DISTRIBUTION_NAME}.zip"
}

task packageDistributionTar(type: Tar) {
    compression Compression.GZIP
    from DISTRIBUTION_PATH
    destinationDir buildDir
    archiveName "${DISTRIBUTION_NAME}.tar.gz"
}

task packageDistribution(dependsOn: [createRuntimeImage]) {
    if (IS_WINDOWS) {
        finalizedBy(packageDistributionZip)
        ARCHIVE_PATH = "$buildDir/${packageDistributionZip.archiveName}"
    } else {
        finalizedBy(packageDistributionTar)
        ARCHIVE_PATH = "$buildDir/${packageDistributionTar.archiveName}"
    }
}



