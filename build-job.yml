parameters:
  name: ''
  pool: ''
  platform: ''

jobs:
  - job: ${{ parameters.name }}
    pool: ${{ parameters.pool }}
    steps:
      - bash: |
          echo '##vso[task.setvariable variable=isTag;]true'
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))

      - bash: |
          echo '##vso[task.setvariable variable=isSnapshot;]true'
        condition: and(succeeded(), endsWith(variables['Build.SourceBranch'], '-SNAPSHOT'))

      - script: |
          curl ${{ parameters.jdkDownloadUrl }} --output ${{ parameters.jdkFile }}

      - task: JavaToolInstaller@0
          inputs:
          versionSpec: "13"
          jdkArchitectureOption: x64
          jdkSourceOption: LocalDirectory
          jdkFile: ${{ parameters.jdkFile }}
          jdkDestinationDirectory: $(Agent.ToolsDirectory)/binaries/openjdk
          cleanDestinationDirectory: true

      - task: Gradle@2
        condition: succeeded()
        env:
          GPG_KEY_NAME: $(gpg.keyname)
          GPG_PASSPHRASE: $(gpg.passphrase)
          BINJR_BUILD_NUMBER: $(Build.BuildNumber)
          IS_TAG: $(isTag)
          REPO_TAG_NAME: $(Build.SourceBranchName)
        inputs:
          options: '--parallel'
          gradleWrapperFile: 'gradlew'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.13'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          tasks: 'packageDistribution'

      - task: GithubRelease@0
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        inputs:
          gitHubConnection: fthevenet
          repositoryName: fthevenet/openjfx-runtime-image
          action: edit
          tag: $(Build.SourceBranchName)
          assets: |
            $(System.DefaultWorkingDirectory)/build/*.zip
            $(System.DefaultWorkingDirectory)/build/*.asc
            $(System.DefaultWorkingDirectory)/build/*.tar.gz
          assetUploadMode: 'replace'
          addChangeLog: false
          isPreRelease: $(isSnapshot)